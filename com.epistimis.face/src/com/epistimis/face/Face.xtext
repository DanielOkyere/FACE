grammar com.epistimis.face.Face with com.epistimis.uddl.Uddl

generate face "http://www.epistimis.com/face/Face"

import "http://www.epistimis.com/uddl/Uddl" as uddl

	
ArchitectureModel:
	'am' name=ID description=STRING '{'
	(dm+=DataModel | um+=UopUoPModel | im+=IntegrationIntegrationModel)+
	'}'
;

FaceElement:
	ArchitectureModel |
	UopUoPModel |
	IntegrationIntegrationModel |
	UopElement
;

enum UoPClientServerRole:
	CLIENT='client' | SERVER='server'
;

enum UopFaceProfile:
	GENERAL_PURPOSE = 'GeneralPurpose' |
	SECURITY = 'Security' |
	SAFETY_BASE = 'SafetyBase' |
	SAFETY_EXTENDED = 'SafetyExtended'
;

enum UopDesignAssuranceLevel:
	A='a' | B='b' | C='c' | D='d' | E='e'
;

enum UopDesignAssuranceStandard:
	DO_178B_ED_12B='DO_178B_ED_12B' |
	DO_178C_ED_12C='DO_178C_ED_12C'
;

enum UopMessageExchangeType:
	INBOUND_MESSAGE='InboundMessage' |
	OUTBOUND_MESSAGE='OutboundMessage'
;

enum UopPartitionType:
	POSIX='POSIX' | ARINC653='ARINC653'
;

enum UopProgrammingLanguage:
	C='C' | CPP='cpp' | JAVA='Java' | ADA='Ada' 
	// EXTENSION: Additional languages not supported by FACE
	| GO='Go' | JS='Javascript' | PYTHON='Python' | RUST = 'Rust' | SQL='SQL'
;

enum UopSynchronizationStyle:
	BLOCKING='Blocking' | NON_BLOCKING='NonBlocking'
;

enum UopThreadType:
	FOREGROUND='Foreground'| BACKGROUND='Background'
;


UopUoPModel:
	'um' name=ID description=STRING '{'
		(um+=UopUoPModel | element +=UopElement)+
	'}'
;

UopElement: 
	UopSupportingComponent |
	UopUnitOfPortability |
	UopAbstractUoP |
	UopMessageType
	// EXTENSION: The following are not in the FACE spec
	| PurposeBase
;

// Instead of a different type, use an enum to define purposes? This means that the grammar can't enforce 
// Which enumeration is used. That hasn't be done with OCL. For now just use a new set of grammar rules
/**
 * EXTENSION Defines a purpose for a component.
 */
PurposeEnumerated:
	'purpose' 	name=ID (description=STRING)? 
		'['
		label+=(PurposeLabel | PurposeSet) ','? (label+=(PurposeLabel| PurposeSet) ','?)*
		']'
		';'
		;
// EXTENSION
PurposeBase:
	PurposeSet |
	PurposeLabel |
	PurposeEnumerated
;
// EXTENSION
PurposeSet:
		'(' name=ID (description=STRING)? 
		'['
		label+=(PurposeLabel | PurposeSet) ','? (label+=(PurposeLabel| PurposeSet) ','?)*
		'])'
		;
// EXTENSION
PurposeLabel:	name=ID |	'(' name=ID description=STRING ')' ;



UopSupportingComponent:
	UopComponentFramework |
	UopLanguageRuntime
;

UopLanguageRuntime:
	'runtime' name=ID ':' version=ID description=STRING ';'
;

UopComponentFramework:
	'framework' name=ID ':' version=ID description=STRING ';'
;

UopAbstractUoP:
	'aUoP' name=ID description=STRING '{'
		(connection+=UopAbstractConnection)*
	'};'	
;


UopAbstractConnection:
	'aconn' name=ID description=STRING '{'
		( 'c' conceptualView=[uddl::ConceptualView|QN])? 
		( 'l' logicalView=[uddl::LogicalView|QN])?
	'};'	
;

UopUnitOfPortability:	
	({UopPortableComponent}'pc' | {UopPlatformSpecificComponent} 'psc') name=ID description=STRING ('->' realizes=[UopAbstractUoP|QN])? '{'
		'purpose:' '[' purpose=[PurposeBase|QN]+ ']'  // EXTENSION: purpose is not in the FACE spec
		'lang:' transportAPILanguage=UopProgrammingLanguage
		('part:' partitionType=UopPartitionType)? 	// EXTENSION: making partitionType optional
		('prof:' faceProfile=UopFaceProfile)?  		// EXTENSION: making faceProfile optional
		('DAL:' designAssuranceLevel=UopDesignAssuranceLevel)?
		('DAS:' designAssuranceStandard=UopDesignAssuranceStandard)?
		('RAM:' memoryRequirements=UopRAMMemoryRequirements)? // EXTENSION: making memoryRequirements optional
		('thread:' '[' thread+=UopThread+ ']')?		// EXTENSION: making thread optional
		('support:' '[' supportingComponent+=[UopSupportingComponent|QN]+ ']')? 
		'conn:' '[' connection+=UopConnection+ ']'
		('lcm:' '[' lcmPort+=UopLifeCycleManagementPort lcmPort+=UopLifeCycleManagementPort? ']' )?
	'};'
;


UopThread: '(' 
	'per:' period=FLOAT 
	'timeCap:' timeCapacity=FLOAT 
	'prio:' relativePriority=INT 
	'core:' relativeCoreAffinity=INT
	'thread:' threadType=UopThreadType
	')'
	;


UopRAMMemoryRequirements:
	{UopRAMMemoryRequirements}
	'('
	('heap:' '[' heapStackMin=INT? ':' heapStackTypical=INT? ':' heapStackMax=INT? ']')?
	('text:' 	textMax=INT)?
	('roData:' 	roDataMax=INT)?
	('data:' 	dataMax=INT)?
	('bss:' 	bssMax=INT)?
	')'
;

UopConnection:
	UopPubSubConnection |
	UopClientServerConnection
;
UopClientServerConnection:
	'csconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:' '[' requestType=[UopMessageType|QN] '/' responseType=[UopMessageType|QN] ']'
	 		   (synchronizationStyle=UopSynchronizationStyle)?
	 	'role:' role=UoPClientServerRole
	 	('period:' period=FLOAT)?
	'}'
;


UopPubSubConnection:
	UopQueuingConnection |
	UopSingleInstanceMessageConnection
;

UopQueuingConnection:
	'qconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:'  messageExchangeType=UopMessageExchangeType 
	 			messageType=[UopMessageType|QN]
	 			(synchronizationStyle=UopSynchronizationStyle)? 
		('depth:' depth=INT)?
	 	('period:' period=FLOAT)?
		'}'
;

UopSingleInstanceMessageConnection:
	'simconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:'  messageExchangeType=UopMessageExchangeType 
	 			messageType=[UopMessageType|QN]
	 			(synchronizationStyle=UopSynchronizationStyle )?
	 	('period:' period=FLOAT)?
		'}'
;

UopLifeCycleManagementPort:
	'(' messageExchangeType=UopMessageExchangeType lcmMessageType=[UopMessageType|QN] ')'
;

UopMessageType:
	UopTemplate |
	UopCompositeTemplate
;

UopCompositeTemplate:
	'ctempl' name=ID description=STRING ('->' realizes=[uddl::LogicalCompositeQuery|QN])? '{'
		isUnion?='isUnion'
		composition+=UopTemplateComposition (composition+=UopTemplateComposition)+
	'};'
;

UopTemplateComposition:
	type=[UopMessageType|QN] rolename=STRING ('->' realizes=[uddl::LogicalQueryComposition|QN])?
;

UopTemplate:
	'templ' name=ID description=STRING  '{'
		'spec:' specification=STRING
		('bound:' boundQuery=[uddl::PlatformQuery|QN])?
		('effective:' effectiveQuery=[uddl::PlatformQuery|QN])?
	'};'	
;

// -------------- Integration -----------

//IntegrationTSNodePortBase:
//	IntegrationUoPEndPoint |
//	IntegrationTSNodePort
//;


// ----
IntegrationIntegrationModel:
	'im' name=ID description=STRING '{'
		(im+=IntegrationIntegrationModel | element+=IntegrationElement)*
	'}'
;

IntegrationElement:
	IntegrationUoPInstance |
	IntegrationTransportChannel |
	IntegrationIntegrationContext
;

IntegrationIntegrationContext:
	'ic' name=ID description=STRING '{'
		('xport:''[' node+=IntegrationTransportNode+ ']')?
		('conn:' '['connection+=IntegrationTSNodeConnection+ ']')?
	'}'
;

IntegrationTSNodeConnection:
	// Could make U2U the default
	'(' ('U2U')? source=[IntegrationUoPOutputEndPoint|QN] '->' destination=[IntegrationUoPInputEndPoint|QN] ')' |
	'(' 'U2T' source=[IntegrationUoPOutputEndPoint|QN] '->' destination=[IntegrationTSNodeInputPort|QN] ')' |
	'(' 'T2U' source=[IntegrationTSNodeOutputPort|QN] '->' destination=[IntegrationUoPInputEndPoint|QN] ')' |
	'(' 'T2T' source=[IntegrationTSNodeOutputPort|QN] '->' destination=[IntegrationTSNodeInputPort|QN] ')' 
;

IntegrationUoPInstance:
	'uinst' name=ID description=STRING '->' realizes=[UopUnitOfPortability|QN]  '{'
		('uri:' configurationURI=STRING)?
		('input:' '[' input+=IntegrationUoPInputEndPoint+ ']')?
		('output:' '[' output+=IntegrationUoPOutputEndPoint+ ']')?
	'};'
;

// EXTENSION: Technically, the IntegrationTSNodeConnection rule sidesteps any need for this rule.
//IntegrationUoPEndPoint:
//	IntegrationUoPInputEndPoint |
//	IntegrationUoPOutputEndPoint
//;

IntegrationUoPInputEndPoint:
	connection=[UopConnection|QN]
;

IntegrationUoPOutputEndPoint:
	 connection=[UopConnection|QN] 
;

IntegrationTransportNode:
	IntegrationViewTransporter |
	IntegrationViewAggregation |
	IntegrationViewTransformation |
	IntegrationViewFilter |
	IntegrationViewSink |
	IntegrationViewSource
;

// EXTENSION: Technically, the IntegrationTSNodeConnection rule sidesteps any need for this rule.
// To ensure proper inheritance
//IntegrationTSNodePort:
//	IntegrationTSNodeOutputPort | 
//	IntegrationTSNodeInputPort	
//;

IntegrationTSNodeInputPort:
	 messageType=[UopMessageType|QN]
;

IntegrationTSNodeOutputPort: 
	 messageType=[UopMessageType|QN]
;

IntegrationViewAggregation:
	'agg' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

IntegrationViewFilter:
	'filter' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

IntegrationViewSink:
	'sink' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

IntegrationViewSource:
	'src' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

IntegrationViewTransformation:
	'xform' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

IntegrationViewTransporter:
	'xport' name=ID description=STRING '{'
		('input:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		('output:'  outPort=IntegrationTSNodeOutputPort )?
		'chan:' channel=[IntegrationTransportChannel|QN]
	'};'
;

IntegrationTransportChannel:
	name=ID description=STRING ';'
;